services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: metr2-backend
    volumes:
      - ./backend/pb_data:/pb/pb_data
    networks:
      - metr2-net
    ports:
      - "${BACKEND_PORT}:8080"

  frontend:
    depends_on:
      - backend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - API_URL=${FRONTEND_API_URL}
    container_name: metr2-frontend
    networks:
      - metr2-net

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
      args:
        - NGINX_BASIC_AUTH_USER=${NGINX_BASIC_AUTH_USER}
        - NGINX_BASIC_AUTH_PASS=${NGINX_BASIC_AUTH_PASS}
    container_name: metr2-nginx
    ports:
      - ${NGINX_PORT}:80
      - 443:443
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_started
      certbot-init:
        condition: service_completed_successfully
        required: true
    networks:
      - metr2-net
    env_file: ./.env
    volumes:
      - cert_volume:/etc/letsencrypt
      - acme_challenge:/usr/share/nginx/html/.well-known
    environment:
      - DOMAIN=${DOMAIN}

  certbot-init:
    image: certbot/certbot
    entrypoint: /bin/sh
    command: -c 'test -d /etc/letsencrypt/live/${DOMAIN} || certbot certonly -v --standalone -v -d $DOMAIN -m $EMAIL --force-renewal --agree-tos'
    ports:
      - ${NGINX_PORT}:80
    volumes:
      - cert_volume:/etc/letsencrypt
  certbot:
    image: certbot/certbot
    entrypoint: /bin/sh
    command: -c 'trap exit TERM; while :; do certbot renew; sleep 24h && wait $${!}; done;'
    depends_on:
      nginx:
        condition: service_started
        required: true
    volumes:
      - cert_volume:/etc/letsencrypt
      - acme_challenge:/usr/share/nginx/html/.well-known

volumes:
  cert_volume:
  acme_challenge:

networks:
  metr2-net:
    name: metr2_net
    external: true
